<?xml version="1.0" encoding="UTF-8"?>

<project basedir="${projects}" 
         name=""
         xmlns:ac="antlib:net.sf.antcontrib">
    <description>basebuild file for all projects</description>
    
    <!-- set global properties for this build -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

    <property file="build.properties"/>
    <property file="projectbuild.properties"/>
    <property file="extlib.properties"/>
       
    <target name="project-dist">
        <echo>Hurray! Hurray! Running dist for ${projects.project.name}</echo>
        <echo>${project.name}</echo>
        <antcall target="projects-clean"/>
        <antcall target="projects-prepare-build"/>
        <antcall target="projects-compile"/>
        <antcall target="projects-jar"/>
        <antcall target="projects-war-tomcat"/>
        <antcall target="projects-deploy-tomcat"/>
    </target>
    
    <target name="project-clean">
        <echo>Deleting ${project.build}</echo>
        <delete dir="${project.build}" failonerror="false"/>
    </target> 
    
    <target name="project-prepare-build">
        <mkdir dir="${project.build}"/>
        <mkdir dir="${project.build.classes}/"/>
        <mkdir dir="${project.build.config}"/>
        <mkdir dir="${project.build.config.struts}"/>
        <mkdir dir="${project.build.config.spring}"/>
        <mkdir dir="${project.build.config.logback}"/>
        <mkdir dir="${project.build.config.ahp}"/>
        <mkdir dir="${project.build.config.webservices}"/>
        <mkdir dir="${project.build.config.webservices.wsdl}"/>
        <mkdir dir="${project.build.config.webservices.cxf}"/>        
        <mkdir dir="${project.build.dist}"/>
        <mkdir dir="${project.build.lib}"/>
        <mkdir dir="${project.build.web.scripts}"/>
    </target>
    
    <target name="project-prepare-classpath">
        <echo>Preparing class path from -> ${project.compiletime.dependency}</echo>
        <!-- create the class path -->
        <ac:for list="${project.compiletime.dependency}"
             delimiter=","
             param="libname"
             trim="true">
            <sequential>
                <if>
                    <isset property="project.classpath"/>
                <then>
                    <var name="project.classpath"
                         value="${project.classpath};${projects.extlib}/@{libname}" />
                </then>
                <else>
                    <var name="project.classpath"
                         value="${projects.extlib}/@{libname}" />
                </else>
                </if>
            </sequential>
        </ac:for>
        <if>
            <isset property="project.siblings.dependency"/>
            <then>        
            <ac:for list="${project.siblings.dependency}"
                 delimiter=","
                 param="siblingname"
                 trim="true">
                <sequential>
                    <var name="project.classpath"
                         value="${project.classpath};${projects.build}/@{siblingname}/${projects.lib}/ahp-@{siblingname}.jar" />
                </sequential>
            </ac:for>        
            </then>
        </if>            
        <echo>${project.classpath}</echo>
    </target>

    <target name="project-prepare-siblings">
        <echo>Invoking all siblings required for ${project.source.java}</echo>
        <if>
            <isset property="project.siblings.dependency"/>
            <then>
                <ac:for list="${project.siblings.dependency}"
                        delimiter=","
                        param="siblingname"
                        trim="true">
                    <sequential>
                        <ant antfile="@{siblingname}/build.xml"
                             inheritRefs="false"
                             inheritAll="false"/>
                    </sequential>
                </ac:for> 
            </then>
        </if>
    </target>
    
    <target name="project-compile"
            depends="project-prepare-siblings,project-prepare-classpath">
        <echo>Compiling Java sources from ${project.source.java}</echo>
        <javac debug="on" 
               destdir="${project.build.classes}" 
               srcdir="${project.source.java}">
            <classpath>   
                <pathelement path="${project.classpath}"/>
            </classpath>
            <include name="**/*.java"/>
            <include name="**/*.properties"/>
        </javac>        
    </target>

    <target name="project-copy-resources">
        <copy todir="${project.build.classes}">
            <fileset dir="${project.source.java}">
                <include name="**/*.properties"/>
            </fileset>
        </copy>            
    </target>
    
    <target name="project-jar"
            depends="project-copy-resources">
        <echo>Creating Jar from ${project.build.classes}</echo>
        <jar destfile="${project.build.lib}/${projects.artifact.prefix}-${project.artifact.jar.name}.jar"
             basedir="${project.build.classes}"
             includes="**/*.class,**/*.properties">       
            <metainf dir="${project.config.javaee}"
                     includes="persistence.xml"
                     erroronmissingdir="false"/>
        </jar>
    </target>
    
    <target name="project-web">
        <echo>Copying Web to ${project.build.web}</echo>
        <copy todir="${project.build.web}">
            <fileset dir="${project.source.web.html}"/>
            <fileset dir="${project.source.web.css}"/>
            <fileset dir="${project.source.web.images}"/>
            <fileset dir="${project.source.web.js}"/>
            <fileset dir="${project.source.web.jsp}"/>
            <fileset dir="${projects.common}/${projects.source}/${projects.web}/${projects.html}"/>
            <fileset dir="${projects.common}/${projects.source}/${projects.web}/${projects.css}"/>
            <fileset dir="${projects.common}/${projects.source}/${projects.web}/${projects.images}"/>
            <fileset dir="${projects.common}/${projects.source}/${projects.web}/${projects.js}"/>
            <fileset dir="${projects.common}/${projects.source}/${projects.web}/${projects.jsp}"/>
        </copy>
    </target>
    
    <target name="project-copy-dependency">
        <echo>Copying compiletime and runtime dependency jar files</echo>
        <!-- copy dependency files -->
        <ac:for list="${project.compiletime.dependency},${project.runtime.dependency}"
                delimiter=","
                param="libname"
                trim="true">
            <sequential>
                <copy file="${projects.extlib}/@{libname}"
                      todir="${project.build.lib}"
                      overwrite="true" />             
            </sequential>
        </ac:for>
        <if>
            <isset property="project.siblings.dependency"/>
            <then>        
            <ac:for list="${project.siblings.dependency}"
                    delimiter=","
                    param="siblingname"
                    trim="true">
                <sequential>
                    <copy file="${projects.build}/@{siblingname}/${projects.lib}/ahp-@{siblingname}.jar"
                          todir="${project.build.lib}"
                          overwrite="true" />             
                </sequential>
            </ac:for>
            </then>
        </if>                  
        <ac:for list="${project.jquery.dependency}"
                delimiter=","
                param="modulename"
                trim="true">
            <sequential>
                <copy todir="${project.build.web.scripts}">
                    <fileset dir="@{modulename}">
                        <include name="css/**/*.css"/>
                        <include name="css/**/images/*.*"/>
                        <include name="js/**/*.js"/>
                    </fileset>
                </copy>            
            </sequential>
        </ac:for>
        <ac:for list="${project.js.dependency}"
                delimiter=","
                param="filename"
                trim="true">
            <sequential>
                <copy todir="${project.build.web.scripts}"
                      file="@{filename}"/>         
            </sequential>
        </ac:for>
    </target>

    <target name="project-xdoclet">
        <echo>${projects.webdoclet.dependency}</echo>
        <taskdef name="webdoclet"
                 classname="xdoclet.modules.web.WebDocletTask"
                 classpath="${projects.webdoclet.dependency}"/>
        <echo message="+--------------------------------------------------+"/>
        <echo message="|                 Running WebDoclet                |"/>
        <echo message="+--------------------------------------------------+"/>
        <webdoclet destdir="${project.build.config}" 
                   excludedtags="@version,@author,@todo"
                   addedtags="@xdoclet-generated at ${TODAY},@copyright The XDoclet Team,@author XDoclet,@version ${version}"
                   force="true" 
                   verbose="true"
                   mergedir="${project.config.xdoclet.merge}">
            <fileset dir="${project.source.java}">
                <include name="**/*.java"/>
                <exclude name="**/*Filter.java" />          
            </fileset>
            <fileset dir="${projects.common}/${projects.source}/${projects.java}">
                <include name="**/*.java"/>
                <exclude name="**/*Filter.java" />          
            </fileset>
            <!-- creates the struts config file -->
            <strutsconfigxml version="1.2" destdir="${project.build.config.struts}" />
        </webdoclet>
        <taskdef name="springdoclet"
                 classname="xdoclet.modules.spring.SpringDocletTask"
                 classpath="${projects.webdoclet.dependency}"/>
        <echo message="+--------------------------------------------------+"/>
        <echo message="|                 Running SpringDoclet             |"/>
        <echo message="+--------------------------------------------------+"/>
        <springdoclet destdir="${project.build.config}" 
                      excludedtags="@version,@author,@todo"
                      addedtags="@xdoclet-generated at ${TODAY},@copyright The XDoclet Team,@author XDoclet,@version ${version}"
                      force="true" 
                      verbose="true">
            <fileset dir="${project.source.java}">
                <include name="**/*.java"/>
                <exclude name="**/*Filter.java" />          
            </fileset>        
            <springxml destdir="${project.build.config.spring}"
                       destinationFile="applicationContext-beans.xml"/>
        </springdoclet>
        <copy todir="${project.test.config}/${projects.spring}"
              file="${project.build.config.spring}/applicationContext-beans.xml"/>
    </target>
    
    <target name="project-copy-config">
        <copy todir="${project.build.config.spring}">
            <fileset dir="${project.config.spring}">
                <include name="applicationContext*.xml"/>
                <include name="*-servlet.xml"/>
            </fileset> 
            <fileset dir="${project.config.spring}/${SERVLET-CONTAINER}">
                <include name="applicationContext*.xml"/>
            </fileset>
        </copy>         
        <copy todir="${project.build.config.logback}">
            <fileset dir="${project.config.sl4j.logback}">
                <include name="logback.${DIST-ENV}.xml"/>
            </fileset>            
        </copy>         
        <copy todir="${project.build.config.ahp}">
            <fileset dir="${project.config.ahp}">
                <include name="*.xml"/>
                <include name="ahp.properties"/>
            </fileset>
            <fileset dir="${project.config.ahp}/${DIST-ENV-DIR}">
                <include name="ahp.db.*.${DB}.properties"/>
                <include name="ahp.jms.*.properties"/>
            </fileset>            
        </copy>
        <copy todir="${project.build.config.webservices}">
            <fileset dir="${project.config.webservices}">
                <include name="**/*.xml"/>
                <include name="**/*.wsdl"/>
            </fileset>            
        </copy>         
        <move file="${project.build.config.ahp}/ahp.db.${DIST-ENV}.${DB}.properties" tofile="${project.build.config.ahp}/ahp.db.properties"/>
        <move file="${project.build.config.ahp}/ahp.jms.${DIST-ENV}.properties" tofile="${project.build.config.ahp}/ahp.jms.properties"/>
        <move file="${project.build.config.logback}/logback.${DIST-ENV}.xml" tofile="${project.build.config.logback}/logback.xml"/>
    </target>
    
    <target name="project-war-tomcat" 
            depends="project-copy-dependency,project-xdoclet">
        <antcall target="project-copy-config">
            <param name="${param.servletcontainer.name}" value="${param.servletcontainer.value.tomcat}"/>
        </antcall>   
        <echo>Creating War file for ${project.artifact.war.name}</echo>
        <war destfile="${project.build.dist}/${project.artifact.war.name}.war" 
             webxml="${project.config.javaee}/web.xml">
            <fileset dir="${project.source.web.html}"/>
            <fileset dir="${project.source.web.css}"/>
            <fileset dir="${project.source.web.images}"/>
            <fileset dir="${project.source.web.js}"/>
            <fileset dir="${project.source.web.jsp}"/>
            <fileset dir="${project.build.web}"/>
            <fileset dir="${projects.build}/${projects.common}/WEB"/>
            <metainf dir="${project.config.tomcat}"
                     includes="context.xml"/>
            <webinf dir="${project.build}"
                    includes="${projects.config}/**/*.xml,${projects.config}/**/*.properties"/>
            <lib dir="${project.build.lib}"
                 includes="*.jar">
                 <exclude name="servlet-api.jar"/>
            </lib>
        </war>  
    </target>

    <target name="project-prepare-jetty">
        <echo>${project.build.standalone.jetty}</echo>
        <mkdir dir="${project.build.standalone.jetty}"/>
        <mkdir dir="${project.build.standalone.jetty.doc}"/>
        <mkdir dir="${project.build.standalone.jetty.lib}"/>
        <mkdir dir="${project.build.standalone.jetty.logs}"/>
        <mkdir dir="${project.build.standalone.jetty.etc}"/>
        <mkdir dir="${project.build.standalone.jetty.work}"/>
    </target>
    
    <target name="project-war-jetty" 
            depends="project-copy-dependency,project-xdoclet,project-prepare-jetty">
        <echo>Creating War file for ${project.artifact.war.name}</echo>
        <antcall target="project-copy-config">
            <param name="${param.servletcontainer.name}" value="${param.servletcontainer.value.jetty}"/>
        </antcall>
        <echo>Creating War file for ${project.artifact.war.name}</echo>
        <war destfile="${project.build.standalone.jetty}/${project.artifact.war.name}.war" 
             webxml="${project.config.javaee}/web.xml">
            <fileset dir="${project.source.web.html}"/>
            <fileset dir="${project.source.web.css}"/>
            <fileset dir="${project.source.web.images}"/>
            <fileset dir="${project.source.web.js}"/>
            <fileset dir="${project.source.web.jsp}"/>
            <fileset dir="${project.build.web}"/>
            <fileset dir="${projects.build}/${projects.common}/WEB"/>
            <webinf dir="${project.build}"
                    includes="${projects.config}/**/*.xml,${projects.config}/**/*.properties,${projects.config}/**/*.wsdl"/>
            <lib dir="${project.build.lib}"
                 includes="*.jar">
                 <exclude name="servlet-api.jar"/>
            </lib>
        </war>  
    </target>
    
    <target name="project-deploy-tomcat">
        <delete dir="${projects.base.tomcat.home.webapps}/${project.artifact.war.name}"/>
        <delete file="${projects.base.tomcat.home.webapps}/${project.artifact.war.name}.war"/>
        <copy file="${project.build.dist}/${project.artifact.war.name}.war" 
                 todir="${projects.base.tomcat.home.webapps}"/>
    </target>

    <target name="project-copy-web" depends="project-web">
        <copy todir="${projects.base.tomcat.home.webapps}/${project.artifact.war.name}">
            <fileset dir="${project.build.web}"/>
        </copy>    
    </target>
    
    <target name="help">
        <echo message="project-deploy-tomcat   -> Deploy Your project to the Tomcat"/>
        <echo message="project-copy-web        -> Copy all web content to the Tomcat"/>
    </target>

    <target name="test-project-prepare-classpath">
        <echo>Preparing class path from -> ${project.runtime.dependency}</echo>
        <!-- create the class path -->
        <ac:for list="${project.runtime.dependency},${project.test.compiletime.dependency},${project.test.runtime.dependency}"
             delimiter=","
             param="libname"
             trim="true">
            <sequential>
                <if>
                    <isset property="project.classpath"/>
                <then>
                    <var name="project.classpath"
                         value="${project.classpath};${projects.extlib}/@{libname}" />
                </then>
                <else>
                    <var name="project.classpath"
                         value="${projects.extlib}/@{libname}" />
                </else>
                </if>
            </sequential>
        </ac:for>          
        <echo>${project.classpath}</echo>
    </target>

    <target name="test-project-prepare">
        <echo>Creating project test directories</echo>
        <mkdir dir="${project.build.test.classes}"/>
        <mkdir dir="${projects.test.reports}/${project.name}"/>
    </target>

    <target name="test-project-compile"
            depends="test-project-prepare,project-prepare-classpath,test-project-prepare-classpath">
        <path id="source.build.classpath">
            <pathelement location="${project.build.classes}"/>
        </path>
        <javac debug="on" 
               destdir="${project.build.test.classes}" 
               srcdir="${project.test.java}">
            <classpath>
                <pathelement path="${project.classpath}"/>
            </classpath>
            <classpath refid="source.build.classpath"/>            
            <include name="**/*.java"/>
        </javac>
    </target>

    <target name="test-project" 
            depends="test-project-compile">
        <path id="source.build.classpath">
            <pathelement location="${project.build.classes}"/>
            <pathelement location="${project.build.test.classes}"/>
        </path>
        <path id="config.build.classpath">
            <pathelement location="${project.config}"/>
            <pathelement location="${project.test.config}"/>
            <pathelement location="${project.build.config}"/>
        </path>
        <junit fork="yes" 
               printsummary="no" 
               haltonfailure="no">
            <classpath>
                <pathelement path="${project.classpath}"/>
            </classpath>               
            <classpath refid="source.build.classpath"/>
            <classpath refid="config.build.classpath"/>
            <batchtest fork="yes" 
                       todir="${projects.test.reports}/${project.name}" >
                <fileset dir="${project.build.test.classes}">
                    <include name="**/Test*.class" />
                </fileset>
            </batchtest>
            <formatter type="xml" />
        </junit>
    </target>
    
    <target name="test-project-generate-reports"
            depends="test-project">
        <junitreport todir="${projects.test.reports}">
            <fileset dir="${projects.test.reports}">
                <include name="**/TEST-*.xml" />
            </fileset>
            <report todir="${projects.test.reports}" />
        </junitreport>    
    </target>
    
    <target name="project-instrument"
            depends="project-prepare-classpath"
            description="byte code instrument for lazy fetching in hibernate">
        <echo>${project.classpath} </echo>
        <taskdef name="instrument" 
                 classname="org.hibernate.tool.instrument.javassist.InstrumentTask">
            <classpath>   
                <pathelement path="${project.classpath}"/>
            </classpath>                 
            <classpath path="${project.build.classes}"/>
        </taskdef>

        <instrument verbose="true">
            <fileset dir="${project.build.classes}/org/ahp/vinavidai/pojo">
                <include name="*.class"/>
            </fileset>
        </instrument>
    </target>    
    
</project>